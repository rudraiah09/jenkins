pipeline {
    agent any
    
    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO_NAME = 'my-node-app'
        EKS_CLUSTER_NAME = 'your-eks-cluster-name'
        EKS_NAMESPACE = 'default'
        IMAGE_TAG = "${env.BUILD_ID}"
        ECR_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                // Checkout code from the repository
                git url: 'https://your-git-repo-url.git', branch: 'main'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Build the Docker image using the Dockerfile in the repository
                script {
                    dockerImage = docker.build("${ECR_REPO_NAME}:${IMAGE_TAG}")
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                // Login to AWS ECR
                script {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }
        
        stage('Push Docker Image to ECR') {
            steps {
                // Tag and push the Docker image to ECR
                script {
                    sh "docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URI}"
                    sh "docker push ${ECR_URI}"
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    // Update kubeconfig to use the EKS cluster
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}"
                    
                    // Create a Kubernetes deployment YAML dynamically
                    def deploymentYaml = """
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: my-node-app
                    spec:
                      replicas: 2
                      selector:
                        matchLabels:
                          app: my-node-app
                      template:
                        metadata:
                          labels:
                            app: my-node-app
                        spec:
                          containers:
                          - name: my-node-app
                            image: ${ECR_URI}
                            ports:
                            - containerPort: 3000
                    """
                    
                    // Write the YAML to a file
                    writeFile file: 'deployment.yaml', text: deploymentYaml
                    
                    // Apply the deployment to the Kubernetes cluster
                    sh "kubectl apply -f deployment.yaml --namespace=${EKS_NAMESPACE}"
                    
                    // Check the deployment status
                    sh "kubectl rollout status deployment/my-node-app --namespace=${EKS_NAMESPACE}"
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images from Jenkins agent
            sh "docker rmi ${ECR_REPO_NAME}:${IMAGE_TAG} || true"
            sh "docker rmi ${ECR_URI} || true"
        }
    }
}
